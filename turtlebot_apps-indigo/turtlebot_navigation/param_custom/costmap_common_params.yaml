max_obstacle_height: 0.60  # assume something like an arm is mounted on top of the robot

# Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
robot_radius: 0.20  # distance a circular robot should be clear of the obstacle (kobuki: 0.18)
# footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # if the robot is not circular

map_type: voxel

obstacle_layer:
  enabled:              true
  max_obstacle_height:  0.6
  origin_z:             0.0
  z_resolution:         0.2
  z_voxels:             2
  unknown_threshold:    15
  mark_threshold:       0
  combination_method:   1
  track_unknown_space:  true  #zhangjiadong  #true needed for disabling global path planning through unknown space
    #是否允许规划器规划穿过未知区域的路径,只修改global planner文件中的allow_unknown参数为true还不行,还要在costmap_commons_params.yaml中设置track_unknown_space参数也为true才行
  obstacle_range: 5.0 #2.5   #更新以机器人为中心，按此数值为半径内的障碍物信息。将障碍物插入代价地图的最大范围，单位为 meters。
  raytrace_range: 5.0   #更新以机器人为中心，按此数值为半径内的自由空间。从地图中扫描出障碍物的最大范围，单位为 meters 。
  origin_z: 0.0
  z_resolution: 0.2
  z_voxels: 2
  publish_voxel_map: false
  observation_sources:  scan   #参数定义了一系列传递空间信息给代价地图的传感器
  scan:
    data_type: LaserScan
    topic: scan
    marking: true
    clearing: true
    min_obstacle_height: 0.05
    max_obstacle_height: 3.0
  bump:
    data_type: PointCloud2
    topic: mobile_base/sensors/bumper_pointcloud
    marking: true
    clearing: false
    min_obstacle_height: 0.0
    max_obstacle_height: 0.15
  # for debugging only, let's you see the entire voxel grid

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled:              true
  cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     0.3  #设置代价地图膨胀半径。可以理解以机器人为中心膨胀半径为此数值内不能有障碍物出现 
                             #max. distance from an obstacle at which costs are incurred for planning paths.

static_layer:
  enabled:              true
  

